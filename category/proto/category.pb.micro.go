// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/category.proto

package category

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Category service

func NewCategoryEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Category service

type CategoryService interface {
	CreateCategory(ctx context.Context, in *CategoryInfo, opts ...client.CallOption) (*CreateCategoryResponse, error)
	FindCategoryById(ctx context.Context, in *FindCategoryByIdRequest, opts ...client.CallOption) (*CategoryInfo, error)
}

type categoryService struct {
	c    client.Client
	name string
}

func NewCategoryService(name string, c client.Client) CategoryService {
	return &categoryService{
		c:    c,
		name: name,
	}
}

func (c *categoryService) CreateCategory(ctx context.Context, in *CategoryInfo, opts ...client.CallOption) (*CreateCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "Category.CreateCategory", in)
	out := new(CreateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) FindCategoryById(ctx context.Context, in *FindCategoryByIdRequest, opts ...client.CallOption) (*CategoryInfo, error) {
	req := c.c.NewRequest(c.name, "Category.FindCategoryById", in)
	out := new(CategoryInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Category service

type CategoryHandler interface {
	CreateCategory(context.Context, *CategoryInfo, *CreateCategoryResponse) error
	FindCategoryById(context.Context, *FindCategoryByIdRequest, *CategoryInfo) error
}

func RegisterCategoryHandler(s server.Server, hdlr CategoryHandler, opts ...server.HandlerOption) error {
	type category interface {
		CreateCategory(ctx context.Context, in *CategoryInfo, out *CreateCategoryResponse) error
		FindCategoryById(ctx context.Context, in *FindCategoryByIdRequest, out *CategoryInfo) error
	}
	type Category struct {
		category
	}
	h := &categoryHandler{hdlr}
	return s.Handle(s.NewHandler(&Category{h}, opts...))
}

type categoryHandler struct {
	CategoryHandler
}

func (h *categoryHandler) CreateCategory(ctx context.Context, in *CategoryInfo, out *CreateCategoryResponse) error {
	return h.CategoryHandler.CreateCategory(ctx, in, out)
}

func (h *categoryHandler) FindCategoryById(ctx context.Context, in *FindCategoryByIdRequest, out *CategoryInfo) error {
	return h.CategoryHandler.FindCategoryById(ctx, in, out)
}
